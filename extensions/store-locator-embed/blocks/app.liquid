{% comment %}
  Store Locator App Block
  Renders a store locator interface with search functionality and optional map
{% endcomment %}

<div id="store-locator-{{ block.id }}" class="store-locator-app" data-shop-domain="{{ shop.domain }}">
  {% if block.settings.heading != blank %}
    <h2 class="store-locator-heading">{{ block.settings.heading }}</h2>
  {% endif %}

  <div class="store-locator-search">
    <input 
      type="text" 
      id="store-search-{{ block.id }}" 
      placeholder="{{ block.settings.search_placeholder }}"
      class="store-search-input"
      disabled
    >
    <button type="button" id="search-btn-{{ block.id }}" class="store-search-btn" disabled>Search</button>
  </div>

  {% if block.settings.show_map %}
    <div 
      id="store-map-{{ block.id }}" 
      class="store-map" 
      style="height: {{ block.settings.map_height }}px;"
    >
      <p>Loading Map...</p>
    </div>
  {% endif %}

  <div id="store-list-{{ block.id }}" class="store-list">
    <div class="store-loading">Loading stores...</div>
    <div class="store-results"></div>
  </div>

  <style>
    .store-locator-app { margin: 20px 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
    .store-locator-heading { margin-bottom: 20px; font-size: 24px; font-weight: 600; }
    .store-locator-search { display: flex; gap: 10px; margin-bottom: 20px; }
    .store-search-input { flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px; }
    .store-search-btn { padding: 12px 24px; background: #007cba; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
    .store-search-btn:hover { background: #005a87; }
    .store-search-btn:disabled, .store-search-input:disabled { background-color: #f4f6f8; color: #c1c7cd; cursor: not-allowed; }
    .store-map { margin-bottom: 20px; border: 1px solid #ddd; border-radius: 4px; background: #f5f5f5; display: flex; align-items: center; justify-content: center; color: #666; }
    .store-list { margin-top: 20px; }
    .store-loading { text-align: center; padding: 20px; color: #666; }
    .store-item { border: 1px solid #ddd; border-radius: 4px; padding: 16px; margin-bottom: 12px; background: #fff; }
    .store-name { font-size: 18px; font-weight: 600; margin-bottom: 8px; }
    .store-address { color: #666; margin-bottom: 8px; }
    .store-distance { font-size: 14px; color: #007cba; font-weight: 500; }
    .no-stores { text-align: center; padding: 40px 20px; color: #666; }
    .pac-container { border-radius: 4px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); border: 1px solid #ddd; font-family: inherit; z-index: 1000; }
    .pac-item { padding: 12px 16px; border-bottom: 1px solid #eee; cursor: pointer; font-size: 14px; }
    .pac-item:hover { background-color: #f5f5f5; }
    .pac-item-selected { background-color: #007cba; color: white; }
    .pac-item-query { font-size: 13px; padding-right: 3px; color: #000; }
    .pac-matched { font-weight: bold; }
  </style>
</div>

<script>
(function() {
  const container = document.getElementById('store-locator-{{ block.id }}');
  const shopDomain = container.dataset.shopDomain;
  const blockId = '{{ block.id }}';
  const storesPerPage = {{ block.settings.stores_per_page }};
  
  const searchInput = document.getElementById(`store-search-${blockId}`);
  const searchBtn = document.getElementById(`search-btn-${blockId}`);
  const storeList = document.getElementById(`store-list-${blockId}`);
  const loading = storeList.querySelector('.store-loading');
  const results = storeList.querySelector('.store-results');
  
  let stores = [];
  let userLocation = null;
  let config = {};

  async function initializeApp() {
    try {
      // Step 1: Fetch settings from our new secure endpoint
      const settingsResponse = await fetch(`/apps/pinpoint-store-locator/api/settings?shop=${shopDomain}`);
      if (!settingsResponse.ok) throw new Error('Failed to load app configuration.');

      config = await settingsResponse.json();

      if (!config.storeLocatorUrl) throw new Error('App URL not configured.');

      // Step 2: Load Google Maps API if a key is provided
      if (config.googleMapsApiKey) {
        await loadGoogleMaps(config.googleMapsApiKey);
        initializeAutocomplete();
      } else {
        console.warn('Google Maps API key not configured. Search functionality will be limited.');
        const mapContainer = document.getElementById(`store-map-${blockId}`);
        if(mapContainer) mapContainer.innerHTML = '<p>Map is unavailable: Google Maps API key is not configured.</p>';
      }

      // Enable search inputs now that maps (or fallback) is ready
      searchInput.disabled = false;
      searchBtn.disabled = false;

      // Step 3: Fetch the list of stores
      const storesResponse = await fetch(`${config.storeLocatorUrl}/api/stores?shop=${shopDomain}`);
      if (!storesResponse.ok) throw new Error('Failed to load stores.');

      stores = await storesResponse.json();
      displayStores(stores);

    } catch (error) {
      console.error('Error initializing store locator:', error);
      showError(error.message);
    } finally {
      loading.style.display = 'none';
    }
  }

  function loadGoogleMaps(apiKey) {
    return new Promise((resolve, reject) => {
      window.initGoogleMapsCallback = () => {
        resolve();
        delete window.initGoogleMapsCallback;
      };

      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMapsCallback`;
      script.async = true;
      script.onerror = () => {
        reject(new Error('Failed to load Google Maps script.'));
        delete window.initGoogleMapsCallback;
      };
      document.head.appendChild(script);
    });
  }

  function initializeAutocomplete() {
    if (!window.google || !window.google.maps.places) {
      console.error('Google Maps Places API not loaded');
      return;
    }
    
    const autocomplete = new google.maps.places.Autocomplete(searchInput, {
      types: ['geocode', 'establishment'],
      fields: ['geometry', 'name']
    });
    
    autocomplete.addListener('place_changed', () => {
      const place = autocomplete.getPlace();
      if (place.geometry && place.geometry.location) {
        userLocation = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
        searchStoresByLocation(userLocation.lat, userLocation.lng);
      }
    });
  }

  function displayStores(storesToShow) {
    if (!storesToShow || storesToShow.length === 0) {
      results.innerHTML = '<div class="no-stores">No stores found</div>';
      return;
    }
    
    const storeHTML = storesToShow.slice(0, storesPerPage).map(store => {
      const distanceText = store.distance ? 
        `<div class="store-distance">${store.distance} miles away</div>` : '';
      
      return `
        <div class="store-item">
          <div class="store-name">${escapeHtml(store.name)}</div>
          <div class="store-address">${escapeHtml(store.address)}</div>
          ${distanceText}
        </div>
      `;
    }).join('');
    
    results.innerHTML = storeHTML;
  }
  
  function searchStoresByLocation(lat, lng) {
    const storesWithDistance = stores.map(store => {
      if (store.latitude && store.longitude) {
        const distance = calculateDistance(lat, lng, store.latitude, store.longitude);
        return { ...store, distance: distance.toFixed(1) };
      }
      return store;
    }).sort((a, b) => (a.distance || Infinity) - (b.distance || Infinity));

    displayStores(storesWithDistance);
  }

  async function searchStores(query) {
    if (!query.trim()) {
      displayStores(stores); // Reset to full list if search is cleared
      return;
    }
    
    if (!config.googleMapsApiKey || !window.google || !window.google.maps) {
      showError('Location search is not available without a Google Maps API key.');
      return;
    }
    
    const geocoder = new google.maps.Geocoder();
    geocoder.geocode({ address: query }, (results, status) => {
      if (status === 'OK' && results[0]) {
        const location = results[0].geometry.location;
        searchStoresByLocation(location.lat(), location.lng());
      } else {
        showError('Location not found. Please try a different search term.');
      }
    });
  }
  
  function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 3959; // Radius of the Earth in miles
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }
  
  function escapeHtml(text) {
    if (text === null || typeof text === 'undefined') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  function showError(message) {
    results.innerHTML = `<div class="no-stores">Error: ${escapeHtml(message)}</div>`;
  }
  
  // Event listeners
  searchBtn.addEventListener('click', () => searchStores(searchInput.value));
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') searchStores(searchInput.value);
  });
  
  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
  } else {
    initializeApp();
  }
})();
</script>

{% schema %}
{
  "name": "Store Locator",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Find Our Stores"
    },
    {
      "type": "range",
      "id": "stores_per_page",
      "label": "Stores per page",
      "min": 5,
      "max": 50,
      "step": 5,
      "default": 10
    },
    {
      "type": "checkbox",
      "id": "show_map",
      "label": "Show map",
      "default": true
    },
    {
      "type": "text",
      "id": "map_height",
      "label": "Map height (px)",
      "default": "400"
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search placeholder text",
      "default": "Enter your location..."
    }
  ]
}
{% endschema %}