{% comment %}
  Store Locator Floating Button Snippet
  Include this snippet in theme.liquid to add a floating store locator button
  Usage: {% render 'store-locator-embed' %}
{% endcomment %}

<script>
  // Store Locator Floating Button
  (function() {
    'use strict';
    
    const STORE_LOCATOR_CONFIG = {
      appId: '{{ app.id }}',
      shopDomain: '{{ shop.domain }}',
      buttonText: 'Find Stores',
      buttonPosition: 'bottom-right'
    };
    
    // Add CSS for the floating button and modal
    const css = `
      .store-locator-float-btn {
        position: fixed;
        z-index: 1000;
        background: #007cba;
        color: white;
        border: none;
        border-radius: 50px;
        padding: 15px 20px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0, 124, 186, 0.3);
        transition: all 0.3s ease;
        bottom: 20px;
        right: 20px;
      }
      
      .store-locator-float-btn:hover {
        background: #005a87;
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0, 124, 186, 0.4);
      }
      
      .store-locator-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 10000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 20px;
      }
      
      .store-locator-modal.show {
        display: flex;
      }
      
      .store-locator-modal-content {
        background: white;
        border-radius: 8px;
        padding: 30px;
        max-width: 600px;
        width: 100%;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
      }
      
      .store-locator-close {
        position: absolute;
        top: 15px;
        right: 20px;
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        line-height: 1;
      }
      
      .store-locator-close:hover {
        color: #333;
      }
      
      .store-search-container {
        margin-bottom: 20px;
      }
      
      .store-search-input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 10px;
        font-size: 16px;
        box-sizing: border-box;
      }
      
      .store-search-btn {
        background: #007cba;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
      }
      
      .store-search-btn:hover {
        background: #005a87;
      }
      
      .store-results {
        max-height: 400px;
        overflow-y: auto;
      }
      
      .store-item {
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 16px;
        margin-bottom: 12px;
        background: white;
      }
      
      .store-name {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 8px;
      }
      
      .store-address {
        color: #666;
        margin-bottom: 8px;
        line-height: 1.4;
      }
      
      .store-loading {
        text-align: center;
        padding: 20px;
        color: #666;
      }
      
      .store-error {
        text-align: center;
        padding: 20px;
        color: #d32f2f;
      }
      
      .no-stores {
        text-align: center;
        padding: 40px 20px;
        color: #666;
      }
    `;
    
    // Inject CSS
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
    
    let modal = null;
    let stores = [];
    
    // Create floating button
    function createFloatingButton() {
      const button = document.createElement('button');
      button.className = 'store-locator-float-btn';
      button.innerHTML = 'üìç ' + STORE_LOCATOR_CONFIG.buttonText;
      button.addEventListener('click', openModal);
      document.body.appendChild(button);
    }
    
    // Create modal
    function createModal() {
      const modalDiv = document.createElement('div');
      modalDiv.className = 'store-locator-modal';
      modalDiv.innerHTML = \`
        <div class="store-locator-modal-content">
          <button class="store-locator-close" aria-label="Close">&times;</button>
          <h2 style="margin-top: 0; margin-bottom: 20px;">Find Our Stores</h2>
          <div class="store-search-container">
            <input type="text" class="store-search-input" placeholder="Enter your location or zip code...">
            <button class="store-search-btn">Search Nearby Stores</button>
          </div>
          <div class="store-results">
            <div class="store-loading">Loading stores...</div>
          </div>
        </div>
      \`;
      
      // Event listeners
      modalDiv.addEventListener('click', (e) => {
        if (e.target === modalDiv) closeModal();
      });
      
      modalDiv.querySelector('.store-locator-close').addEventListener('click', closeModal);
      
      const searchBtn = modalDiv.querySelector('.store-search-btn');
      const searchInput = modalDiv.querySelector('.store-search-input');
      
      searchBtn.addEventListener('click', () => searchStores(searchInput.value));
      searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') searchStores(searchInput.value);
      });
      
      document.body.appendChild(modalDiv);
      return modalDiv;
    }
    
    function openModal() {
      if (!modal) {
        modal = createModal();
      }
      modal.classList.add('show');
      document.body.style.overflow = 'hidden';
      loadStores();
    }
    
    function closeModal() {
      if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
      }
    }
    
    async function loadStores() {
      try {
        const resultsDiv = modal.querySelector('.store-results');
        resultsDiv.innerHTML = '<div class="store-loading">Loading stores...</div>';
        
        const response = await fetch(\`https://\${STORE_LOCATOR_CONFIG.shopDomain}/apps/pinpoint-store-locator/api/stores?shop=\${STORE_LOCATOR_CONFIG.shopDomain}\`);
        
        if (response.ok) {
          stores = await response.json();
          displayStores(stores);
        } else {
          showError('Failed to load stores');
        }
      } catch (error) {
        console.error('Store locator error:', error);
        showError('Error loading stores');
      }
    }
    
    async function searchStores(query) {
      if (!query.trim()) {
        displayStores(stores);
        return;
      }
      
      // Simple text search
      const filtered = stores.filter(store => 
        store.name.toLowerCase().includes(query.toLowerCase()) ||
        store.address.toLowerCase().includes(query.toLowerCase())
      );
      
      displayStores(filtered);
    }
    
    function displayStores(storesToShow) {
      const resultsDiv = modal.querySelector('.store-results');
      
      if (storesToShow.length === 0) {
        resultsDiv.innerHTML = '<div class="no-stores">No stores found</div>';
        return;
      }
      
      const storeHTML = storesToShow.map(store => \`
        <div class="store-item">
          <div class="store-name">\${escapeHtml(store.name)}</div>
          <div class="store-address">\${escapeHtml(store.address)}</div>
        </div>
      \`).join('');
      
      resultsDiv.innerHTML = storeHTML;
    }
    
    function showError(message) {
      const resultsDiv = modal.querySelector('.store-results');
      resultsDiv.innerHTML = \`<div class="store-error">Error: \${escapeHtml(message)}</div>\`;
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text || '';
      return div.innerHTML;
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', createFloatingButton);
    } else {
      createFloatingButton();
    }
    
  })();
</script>